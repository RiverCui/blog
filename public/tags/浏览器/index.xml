<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>River&#39;s Blog – 浏览器</title>
    <link>http://localhost:1313/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/</link>
    <description>Recent content in 浏览器 on River&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 21 Dec 2023 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="http://localhost:1313/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>浏览器的缓存机制</title>
      <link>http://localhost:1313/blog/browser-cache/</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/browser-cache/</guid>
      <description>
        
        
        &lt;p&gt;浏览器缓存是一种提高网页加载速度和性能的技术，它允许浏览器存储网站资源，比如 HTML 页面、图片、CSS 样式表和 JS 脚本文件等。本质是通过&lt;strong&gt;减少对服务器的请求，从本地缓存中加载资源，从而减少加载时间和服务器负载&lt;/strong&gt;，是前端性能优化的重要手段。&lt;/p&gt;
&lt;p&gt;一.浏览器缓存
1.HTTP缓存
(1) HTTP 缓存机制
&lt;img src=&#34;https://cyl-blog-image.oss-cn-shenzhen.aliyuncs.com/img/HTTP%20%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.png&#34; alt=&#34;HTTP 缓存机制&#34; loading=&#34;lazy&#34; /&gt;
A.强缓存
B.协商缓存
(2) 强缓存、协商缓存区别
2.本地缓存
（1）localStorage
（2）sessionStorage
（3）indexDB
二.浏览器缓存位置&lt;/p&gt;
&lt;p&gt;相关面试题：
Web 缓存通常包括哪些
浏览器什么情况下会使用本地缓存
强缓存和协商缓存的区别
强制 ctrl + F5 刷新会发生什么
session、cookie 以及 storage 的区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Web 缓存通常包括哪些类型？&lt;/strong&gt;
Web 缓存主要可以分为以下几种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;浏览器缓存（Browser Cache）&lt;/strong&gt;：它存在于客户端，用于临时存放经过用户访问过的网页资源，如HTML页面、图片、脚本等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代理缓存（Proxy Cache）&lt;/strong&gt;：代理服务器上的缓存，用于服务多个用户，减少重复的网络请求，加快访问速度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网关缓存（Gateway Cache）&lt;/strong&gt;：作为服务端和客户端之间的一个中介层，通常由CDN（内容分发网络）执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用服务器缓存&lt;/strong&gt;：直接在应用服务器上缓存常用数据，如数据库查询结果、计算结果等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库缓存&lt;/strong&gt;：为了减少数据库查询的次数，直接在数据库层面缓存查询结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;浏览器什么情况下会使用本地缓存？&lt;/strong&gt;
浏览器会在以下情况下使用本地缓存：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当访问的资源存在有效的缓存指令时，如Cache-Control头或Expires头的有效日期内。&lt;/li&gt;
&lt;li&gt;当资源未修改，且存在Etag或Last-Modified头匹配本地缓存时，可以使用本地缓存。&lt;/li&gt;
&lt;li&gt;用户访问历史、临时重定向等场景也可能触发浏览器使用本地缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;强缓存和协商缓存的区别？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;强缓存（Strong Caching）&lt;/strong&gt;：不需要向服务器发送请求就能加载资源。它通过&lt;code&gt;Cache-Control&lt;/code&gt;的&lt;code&gt;max-age&lt;/code&gt;指令或&lt;code&gt;Expires&lt;/code&gt;头来控制资源在本地缓存的有效时间。只有在缓存有效期内，资源就从本地缓存加载，否则浏览器会发起新的网络请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协商缓存（Negotiated Caching）&lt;/strong&gt;：当强缓存过期后，浏览器会向服务器发送带有&lt;code&gt;If-None-Match&lt;/code&gt;（对应于ETag）或&lt;code&gt;If-Modified-Since&lt;/code&gt;（对应于Last-Modified）的请求头的请求。服务器接收到请求后，会根据这些条件头判断资源是否有更新。如果资源未更新，返回&lt;code&gt;304 Not Modified&lt;/code&gt;响应，浏览器继续使用本地缓存的资源；若资源有更新，服务器返回&lt;code&gt;200 OK&lt;/code&gt;与新的资源内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;强制 Ctrl + F5 刷新会发生什么？&lt;/strong&gt;
按下Ctrl + F5执行强制刷新时，浏览器会忽略所有缓存（包括强缓存和协商缓存），向服务器发送一个全新的请求，并下载最新的资源。这个行为通常用于获取网页的最新版本，例如在更新网页内容后。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;session、cookie 以及 storage 的区别？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cookie&lt;/strong&gt;：小段数据，由服务器发送到用户的浏览器，并保存在用户本地，随后的HTTP请求都会携带这些数据，向服务器传递信息。Cookie有大小限制（一般为4KB），和生命周期限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Session&lt;/strong&gt;：服务器端的存储机制，用来存储用户的会话信息。通常，服务器会在客户端创建一个Session标识（session id），这个标识通常被存储在客户端的Cookie中。当用户再次访问服务器时，服务器通过session id来识别用户。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;：HTML5引入的Web Storage API，包括localStorage和sessionStorage。localStorage用于持久化的本地存储，即数据在浏览器关闭后依然存在；sessionStorage用于会话级别的存储，即数据只在页面会话期间存在，关闭页面或浏览器后会被清除。_storage_有更大的空间限制（通常至少5MB）比cookies，并且仅在客户端存储，不会随HTTP请求发送到服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
  </channel>
</rss>

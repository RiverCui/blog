<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>River&#39;s Blog – JavaScript</title>
    <link>https://moon-odyssey.com/tags/javascript/</link>
    <description>Recent content in JavaScript on River&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 12 Aug 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://moon-odyssey.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>JavaScript 中的 Event Loop</title>
      <link>https://moon-odyssey.com/event-loop-in-javascript/</link>
      <pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://moon-odyssey.com/event-loop-in-javascript/</guid>
      <description>
        
        
        &lt;h2&gt;Event Loop 是什么&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;event-loop-是什么&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#event-loop-%e6%98%af%e4%bb%80%e4%b9%88&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Event Loop 是 JavaScript 实现&lt;strong&gt;异步&lt;/strong&gt;的核心机制，解决 JavaScript &lt;strong&gt;单线程&lt;/strong&gt;带来的&lt;strong&gt;运行阻塞&lt;/strong&gt;的问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaScript 之所以是单线程，是因为最初被用来设计处理网页交互时，需要操作 DOM，如果是多线程，比如一个线程正在修改 DOM，而另一个线程也在修改同一个 DOM，会导致冲突和复杂的并发问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们先了解下 JavaScript 的执行栈(Call Stack)和任务队列(Callback Queue/Task Queue)，如下图所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步代码都会推入到 Call Stack 栈中，代码执行完毕后从栈中弹出。&lt;/li&gt;
&lt;li&gt;浏览器中的 JavaScript 提供 WebAPIs 例如 setTimeout、DOM、fetch等，这些方法执行后，会将它们的回调添加到 Callback Queue，等待执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 Event Loop 事件循环就是用来监控调用栈(Call Stack)，检查任务队列(Callback Queue)的，来安排执行这些&lt;strong&gt;异步回调代码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cyl-blog-image.oss-cn-shenzhen.aliyuncs.com/img/202412210005052.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Event Loop 执行流程&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;event-loop-执行流程&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#event-loop-%e6%89%a7%e8%a1%8c%e6%b5%81%e7%a8%8b&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;执行同步代码&lt;/p&gt;
&lt;p&gt;执行当前宏任务中的所有&lt;strong&gt;同步代码&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清空微任务队列&lt;/p&gt;
&lt;p&gt;当同步代码执行完毕后，立即检查微任务队列&lt;/p&gt;
&lt;p&gt;执行所有微任务，直到&lt;strong&gt;清空微任务队列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果在清空微任务队列时，产生了新的微任务，也会&lt;strong&gt;立即执行&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UI 渲染&lt;/p&gt;
&lt;p&gt;微任务队列清空后，检查是否需要 UI 渲染，如果需要就进行 UI 渲染&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行下一个宏任务&lt;/p&gt;
&lt;p&gt;从宏任务队列中取出&lt;strong&gt;一个&lt;/strong&gt;任务执行，重复2-4的步骤&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;宏任务和微任务&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;宏任务和微任务&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e5%ae%8f%e4%bb%bb%e5%8a%a1%e5%92%8c%e5%be%ae%e4%bb%bb%e5%8a%a1&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;实际上，js 中的异步任务分为两类：宏任务(Macro task) 和微任务(Micro tasks)。&lt;/p&gt;
&lt;p&gt;微任务的优先级比宏任务高，在 DOM 渲染前执行，且会一次性执行完毕。宏任务在 DOM 渲染后执行，一次只执行一个宏任务，然后进入下一次事件循环。&lt;/p&gt;
&lt;p&gt;宏任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setTimeout&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setInterval&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setImmediate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;I/O&lt;/code&gt; 事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MessageChannel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Promise.then/catch/finally&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process.nextTick&lt;/code&gt; (Node.js 环境，优先级高于 Promise)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MutationObserver&lt;/code&gt; (监视 DOM 变化)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queueMicroTask&lt;/code&gt; (直接创建微任务的方法)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;例子&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;例子&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%e4%be%8b%e5%ad%90&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;理解 Event Loop 最好的方法就是实践，让我们来举个例子，下面这段代码会如何执行：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;start&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;setTimeout&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;promise1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;promise2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;promise1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;promise2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;执行流程分析：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;print &lt;code&gt;start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;setTimeout&lt;/code&gt;，将回调函数注册到宏任务队列&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;Promise&lt;/code&gt;，将回调函数注册到微任务队列&lt;/li&gt;
&lt;li&gt;print &lt;code&gt;end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Call Stack 清空&lt;/li&gt;
&lt;li&gt;执行所有微任务，print &lt;code&gt;promise1&lt;/code&gt;、&lt;code&gt;promise2&lt;/code&gt;，微任务队列清空&lt;/li&gt;
&lt;li&gt;取宏任务队列中的第一个执行，print &lt;code&gt;setTimeout&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
  </channel>
</rss>
